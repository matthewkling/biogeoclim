{
    "contents" : "\nlibrary(shiny)\n\nlibrary(rgdal)\nlibrary(raster)\n#library(ecoclim)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(ggmap)\nlibrary(gridExtra)\nlibrary(grid)\n# sampSurf\n\n\n# load data\nd <- readRDS(\"data/pixels.rds\")\n\n# veg metadata\nvmd <- read.csv(\"data/US_130EVT_02092015.csv\", stringsAsFactors=F)\nvmd <- tbl_df(vmd)\nvalid_types <- unique(vmd$VALUE[!vmd$EVT_LF %in% c(\"Water\", \"Barren\", \"Developed\", \"Agriculture\", \"Sparse\") &\n                                      !vmd$EVT_PHYS %in% c(\"Developed\", \"Agricultural\") &\n                                      !grepl(\"ntroduced|lantation\", vmd$VALUE)]) #### not working #####\nvmd <- select(vmd, VALUE, CLASSNAME, EVT_ORDER, EVT_CLASS, EVT_SBCLS)\nnames(vmd) <- tolower(names(vmd))\nnames(vmd)[names(vmd)==\"value\"] <- \"vegtype\"\n\nd <- na.omit(full_join(d, vmd))\n\n\n# coordinate systems\npll <- CRS(\"+proj=longlat +ellps=WGS84\")\npaea <- CRS(\"+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\")\n\n# state boundaries\nboundaries <- map_data(\"state\")\n\n\n\n\n\n\n#input <- list(location=\"Meeker Park, CO\", comparison=\"horizontal\", zoom=10, radius=25, prob=.9, basemap=\"terrain\", radius_regional=150, neighbors=.05)\n\n#input <- list(location=\"telluride\", comparison=\"vertical\", radius=25, prob=.9)\n\nshinyServer(function(input, output, session) {\n      \n      output$logo <- renderImage({\n            list(src = \"data/biogeoclim2.png\",\n                 contentType = 'image/png',\n                 width = 200,\n                 height = 200*486/421)\n      }, deleteFile = F)\n      \n      output$biogeo_title <- renderText({paste0(\"What lives near \", input$location, \", and where else does it live?\")})\n      output$bioclim_title <- renderText({paste0(\"What climates do \", input$location, \" habitats occupy, locally and regionally?\n                                                 Locally, is climate change introducing climates novel to these habitats?\")})\n      output$geoclim_title <- renderText({paste0(\"With climate change, how are climates analogous to \", input$location, \"\\'s migrating across space?\")})\n      \n      circle <- reactive({\n            location <- input$location\n            if(is.na(as.numeric(substr(location, nchar(location), nchar(location))))){\n                  point <- geocode(location, source=\"google\")\n            } else{\n                  point <- as.numeric(str_split(location, pattern=\", \"))\n            }\n            names(point) <- c(\"x\", \"y\")\n            coordinates(point) <- c(\"x\", \"y\")\n            projection(point) <- pll\n            point <- spTransform(point, paea)\n            point <- as.data.frame(point)\n            point <- c(x=point$x, y=point$y)\n            radius_m <- input$radius * 1000\n            circle <- sampSurf::spCircle(radius_m, pll, point)\n            lapply(circle, function(x){\n                  projection(x) <- paea\n                  spTransform(x, pll)\n            })\n      })\n      \n      \n      d_local <- reactive({\n            s <- as.data.frame(d)\n            coordinates(s) <- c(\"x\", \"y\")\n            projection(s) <- pll\n            s <- s[!is.na(over(s, circle()$spCircle)),]\n            s <- tbl_df(as.data.frame(s))\n            types <- rev(sort(table(s$vegtype)))\n            types <- as.integer(names(types))\n            types <- types[types %in% valid_types]\n            types <- types[1:8]\n            s[s$vegtype %in% types,]\n      })\n      \n      \n      output$localtypes <- renderUI({\n            classes <- as.character(na.omit(unique(d_local()$classname)))\n            title <- paste(\"Select from vegetation types within\", input$radius, \"km of\", input$location)\n            \n            if(input$comparison==\"horizontal\"){\n                  return(checkboxGroupInput(\"classes_selected\", title, classes, selected=classes[1:4]))\n            }\n            if(input$comparison==\"vertical\"){\n                  radioButtons(\"classes_selected\", title, classes, selected=classes[1])\n            }\n      })\n      #input$classes_selected <- d_local$classname[1:4]\n      \n      \n      \n      \n      \n      ############## BIO-GEO ###############\n      \n      output$biogeo <- renderPlot({\n            \n            dc <- fortify(circle()$spCircle)\n            dp <- as.data.frame(circle()$location)\n            \n            style <- theme(axis.text=element_blank(), axis.title=element_blank(), \n                           axis.ticks=element_blank(), panel.grid=element_blank())\n            expand <- function(x, margin=.25){\n                  r <- x[2] - x[1]\n                  b <- r * margin\n                  x + c(-b, b)\n            }\n            \n            \n            if(input$comparison==\"horizontal\"){\n                  f <- d %>%\n                        dplyr::select(x, y, classname) %>%\n                        filter(classname %in% input$classes_selected)\n            }\n            \n            if(input$comparison==\"vertical\"){\n                  d_type <- d_local() %>%\n                        select(classname, evt_order, evt_sbcls) %>%\n                        filter(classname %in% input$classes_selected) %>%\n                        distinct() %>%\n                        mutate_each(funs(as.character))\n                  f <- d %>%\n                        dplyr::select(x, y, classname, evt_order, evt_sbcls) %>%\n                        filter(evt_order %in% d_type$evt_order) %>%\n                        gather(level, name, classname, evt_order, evt_sbcls) %>%\n                        filter(name %in% d_type[1,]) %>%\n                        mutate(classname = name) %>%\n                        mutate(level = as.integer(factor(level, levels=c(\"classname\", \"evt_sbcls\", \"evt_order\")))) %>%\n                        arrange(x, y, level) %>%\n                        group_by(x, y) %>%\n                        slice(1) %>%\n                        ungroup() %>%\n                        mutate(classname = paste0(level, \": \", name))\n            }\n            \n            #colors <- list(horizontal=c(\"red\", \"purple\", \"blue\", \"forestgreen\"),\n            #               vertical=c(\"darkblue\", \"dodgerblue\", \"cadetblue1\"))\n            #colors <- colors[[input$comparison]]\n            #colors <- scale_fill_manual(values=colorRampPalette(colors)(length(unique(f$classname))))\n            \n            regional_map <- ggplot() + \n                  geom_raster(data=f, aes(x, y, fill=classname), size=.6, shape=15) +\n                  geom_polygon(data=boundaries, aes(long, lat, group=group), \n                               size=.5, color=\"gray40\", fill=NA) +\n                  geom_polygon(data=dc, aes(long, lat), color=\"black\", fill=NA) +\n                  annotate(geom=\"point\", x=dp$x, y=dp$y, shape=3, size=3) +\n                  coord_fixed(xlim=expand(range(f$x, na.rm=T), margin=.05), \n                              ylim=expand(range(f$y, na.rm=T), margin=.05), \n                              ratio=1.3) +\n                  theme_minimal() +\n                  style +\n                  theme(legend.position=\"none\")\n            \n            local_map <- ggplot() + \n                  geom_polygon(data=boundaries, aes(long, lat, group=group), size=.5, color=\"gray40\", fill=NA) +\n                  geom_raster(data=f, aes(x, y, fill=classname)) +\n                  geom_polygon(data=dc, aes(long, lat), color=\"black\", fill=NA) +\n                  annotate(geom=\"point\", x=dp$x, y=dp$y, shape=3, size=10) +\n                  coord_fixed(xlim=expand(range(dc$long)), \n                              ylim=expand(range(dc$lat)), \n                              ratio=1.3) +\n                  labs(x=NULL, y=NULL, fill=NULL) +\n                  theme_minimal() +\n                  style +\n                  theme(legend.position=\"bottom\",\n                        legend.direction=\"vertical\")\n            \n            grid.draw(arrangeGrob(local_map, regional_map,  \n                                  nrow=1, widths=c(2, 3)))\n      })\n      \n      \n      \n      ######################  BIO-CLIM #####################\n      \n      output$bioclim <- renderPlot({\n            if(input$comparison==\"horizontal\"){\n                  f <- d %>%\n                        dplyr::select(x, y, classname, bio1_1980, bio12_1980) %>%\n                        filter(classname %in% input$classes_selected) %>%\n                        mutate(bio12_1980 = log10(bio12_1980))\n                  names(f) <- gsub(\"_1980\", \"\", names(f))\n            }\n            \n            if(input$comparison==\"vertical\"){\n                  d_type <- d_local() %>%\n                        select(classname, evt_order, evt_sbcls) %>%\n                        filter(classname %in% input$classes_selected) %>%\n                        distinct() %>%\n                        mutate_each(funs(as.character))\n                  f <- d %>%\n                        dplyr::select(x, y, classname, evt_order, evt_sbcls, bio1_1980, bio12_1980) %>%\n                        filter(evt_order %in% d_type$evt_order) %>%\n                        gather(level, name, classname, evt_order, evt_sbcls) %>%\n                        filter(name %in% d_type[1,]) %>%\n                        mutate(classname = name) %>%\n                        mutate(level = as.integer(factor(level, levels=c(\"classname\", \"evt_sbcls\", \"evt_order\")))) %>%\n                        arrange(x, y, level) %>%\n                        group_by(x, y) %>%\n                        slice(1) %>% # retain only the most detailed level for each pixel\n                        ungroup() %>%\n                        mutate(classname = paste0(level, \": \", name),\n                               bio12_1980=log10(bio12_1980))\n                  names(f) <- sub(\"_1980\", \"\", names(f))\n                  f <- f %>%\n                        split(f$classname) %>%\n                        lapply(function(x) sample_n(x, min(nrow(x), 10000))) %>%\n                        do.call(\"rbind\", .)\n            }\n            \n            # build contours\n            getlevel <- function(i){\n                  x <- f[f$classname==i,]\n                  x <- na.omit(x)\n                  x <- try(contourLevel(x$bio1, x$bio12, input$prob))\n                  if(class(x)==\"try-error\") x <- NA\n                  return(x)\n            }\n            levels <- sapply(unique(f$classname), getlevel)\n            alph <- .2\n            if(input$comparison==\"vertical\") alph <- .05\n            contours_baseline_national <- mapply(function(df, b) stat_density2d(data=df, \n                                                                                aes(x=bio1, y=bio12, color=classname, fill=classname), \n                                                                                breaks=b, geom=\"polygon\", alpha=alph, size=.1, na.rm=T), \n                                                 plyr::dlply(f, plyr::.(classname)), levels)\n            \n            \n            \n            \n            # point and segment data\n            d_point <- d_local() %>%\n                  filter(classname %in% input$classes_selected) %>%\n                  group_by(classname) %>%\n                  summarize_each(funs(mean), bio1_1980:bio12_2050) %>%\n                  gather(info, value, bio1_1980:bio12_2050) %>%\n                  separate(info, c(\"variable\", \"year\"), sep=\"_\", convert=T) %>%\n                  spread(variable, value) %>%\n                  mutate(bio12=log10(bio12))\n            if(input$comparison==\"vertical\") d_point$classname <- paste0(\"1: \", d_point$classname)\n            \n            d_segment <- d_point %>%\n                  gather(variable, value, bio1, bio12) %>%\n                  unite(info, variable, year) %>%\n                  spread(info, value)\n            \n            ggplot() + \n                  contours_baseline_national +\n                  geom_segment(data=d_segment, aes(x=bio1_1980, xend=bio1_2012, y=bio12_1980, \n                                            yend=bio12_2012, color=classname), \n                               size=1, linetype=1) +\n                  geom_segment(data=d_segment, aes(x=bio1_2012, xend=bio1_2050, y=bio12_2012, \n                                            yend=bio12_2050, color=classname),\n                               size=.5, linetype=1, alpha=.5, arrow=grid::arrow(angle=15, type=\"closed\")) +\n                  geom_point(data=d_point, aes(bio1, bio12, color=classname, alpha=factor(year)), \n                             size=8, shape=21) +\n                  scale_alpha_discrete(range=c(1, .5), guide=\"none\") +\n                  scale_x_continuous(expand=c(.1,0)) +\n                  scale_y_continuous(expand=c(.1,0)) +\n                  labs(x=translate(\"bio1\", \"words\"), \n                       y=paste(\"log\", translate(\"bio12\", \"words\"))) +\n                  theme_minimal() +\n                  theme(legend.position=\"bottom\", legend.direction=\"vertical\")\n            \n      })\n      \n      ############## GEO-CLIM ###############\n      \n      output$geoclim <- renderPlot({\n            \n            require(ggmap)\n            basemap <- ggmap(get_map(input$location, maptype=input$basemap, \n                                     color=\"bw\", zoom=input$zoom))\n            \n            ext <- c(range(basemap$data$lon), range(basemap$data$lat))\n            \n            \n            f <- d %>% #d_regional() %>%\n                  dplyr::select(x, y, elevation, bio1_1980:bio12_2050) %>%\n                  filter(x>=ext[1], x<=ext[2],\n                         y>=ext[3], y<=ext[4]) %>%\n                  gather(info, value, bio1_1980:bio12_2050) %>%\n                  separate(info, c(\"variable\", \"year\"), sep=\"_\", convert=T) %>%\n                  spread(variable, value) %>%\n                  mutate(bio12=log10(bio12)) %>%\n                  arrange(year, x, y)\n            \n            pc <- prcomp(f[,c(\"bio1\", \"bio12\")], center=T, scale=T)\n            \n            f_local <- d_local() %>%\n                  dplyr::select(x, y, bio1_1980:bio12_2050) %>%\n                  gather(info, value, bio1_1980:bio12_2050) %>%\n                  separate(info, c(\"variable\", \"year\"), sep=\"_\", convert=T) %>%\n                  spread(variable, value) %>%\n                  mutate(bio12=log10(bio12)) %>%\n                  group_by(year) %>%\n                  summarize_each(funs(mean), bio1, bio12)\n            pc_local <- predict(pc, f_local[,c(\"bio1\", \"bio12\")])\n            \n            \n            library(FNN)\n            k <- input$neighbors\n            k <- round(nrow(f) / 3 * k, 0)\n            fy <- split(f, f$year)\n            pcy <- split(as.data.frame(pc$x), f$year)\n            nny <- lapply(pcy, function(x){\n                  get.knnx(data=as.matrix(x), query=matrix(pc_local[2,], ncol=2), k=k)\n            })\n            \n            for(x in names(nny)){\n                  fy[[x]]$nearest <- 0\n                  fy[[x]]$nearest[nny[[x]]$nn.index] <- 1\n            }\n            f <- do.call(\"rbind\", fy)\n            fn <- filter(f, nearest==1)\n            \n            \n            \n            style <- theme(axis.text=element_blank(), axis.title=element_blank(), \n                           axis.ticks=element_blank(), panel.grid=element_blank())\n            dc <- fortify(circle()$spCircle)\n            dp <- as.data.frame(circle()$location)\n            \n            \n            \n            latlong <- basemap +\n                  geom_raster(data=fn[fn$year==1980,], \n                              aes(x, y), fill=\"blue\", alpha=.4) +\n                  geom_raster(data=fn[fn$year==2012,], \n                              aes(x, y), fill=\"green\", alpha=.4) +\n                  geom_raster(data=fn[fn$year==2050,], \n                              aes(x, y), fill=\"red\", alpha=.4) +\n                  geom_polygon(data=dc, aes(long, lat), color=\"black\", fill=NA) +\n                  annotate(geom=\"point\", x=dp$x, y=dp$y, shape=3, size=3) +\n                  coord_cartesian() +\n                  coord_fixed(ratio=1.3) +\n                  theme_minimal() +\n                  style\n             \n            elev <- ggplot(fn, aes(elevation, fill=factor(year), color=factor(year))) +\n                  geom_density(alpha=.3, adjust=.8) +\n                  scale_fill_manual(values=c(\"blue\", \"green\", \"red\")) +\n                  scale_color_manual(values=c(\"blue\", \"green\", \"red\")) +\n                  coord_flip() +\n                  theme_minimal() +\n                  theme(legend.position=\"top\") +\n                  labs(y=\"relative land area\", fill=\"time period\", color=\"time period\")\n            \n            grid.draw(arrangeGrob(latlong, elev, nrow=1, widths=c(2, 1)))\n            \n      })\n      \n      \n})\n\n",
    "created" : 1444964688713.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3232256256",
    "id" : "A9B95568",
    "lastKnownWriteTime" : 1444966368,
    "path" : "E:/biogeoclim/server.r",
    "project_path" : "server.r",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}